fragment asset on Asset {
  address
  symbol
  decimals
  name
}

fragment amount on AssetAmount {
  raw
  decimal
  usd
}

query getNFTOffers($walletAddress: String!, $sortBy: SortCriterion!) {
  nftOffers(walletAddress: $walletAddress, sortBy: $sortBy) {
    createdAt
    url
    nft {
      aspectRatio
      name
      contractAddress
      tokenId
      collectionName
      imageUrl
      uniqueId
      predominantColor
    }
    floorDifferencePercentage
    validUntil
    marketplace {
      name
      imageUrl
    }
    grossAmount {
      ...amount
    }
    netAmount {
      ...amount
    }
    paymentToken {
      ...asset
    }
    royaltiesPercentage
    feesPercentage
    floorPrice {
      amount {
        ...amount
      }
      paymentToken {
        ...asset
      }
    }
    network
  }
}

query getPoapEventByQrHash($qrHash: String!) {
  getPoapEventByQrHash(qrHash: $qrHash) {
    id
    name
    imageUrl
    createdAt
    qrHash
    secret
  }
}

query claimPoapByQrHash(
  $walletAddress: String!
  $qrHash: String!
  $secret: String!
) {
  claimPoapByQrHash(
    walletAddress: $walletAddress
    qrHash: $qrHash
    secret: $secret
  ) {
    success
    error
  }
}

query getPoapEventBySecretWord($secretWord: String!) {
  getPoapEventBySecretWord(secretWord: $secretWord) {
    id
    name
    imageUrl
    createdAt
    qrHash
    secretWord
  }
}

query claimPoapBySecretWord($walletAddress: String!, $secretWord: String!) {
  claimPoapBySecretWord(
    walletAddress: $walletAddress
    secretWord: $secretWord
  ) {
    success
    error
  }
}


query getSingleCollection($walletAddress: String!, $contractAddress: String!, $chain: Int!) {
  getSingleCollection(
    walletAddress: $walletAddress
    contractAddress: $contractAddress
    chain: $chain
  ) {
    collection {
      # URL on mint fun
      externalURL
      contract
      # {chain id}:{address} (ex. 1:0xabc...) - used as ID
      contractAddress
      chainId
      deployer
      name
      # Collection image of project
      imageURL
      mintsLastHour
      addressesLastHour
      # ISO8601 date
      lastEvent
        # ISO8601 date
      firstEvent
      totalMints
      # max supply isn't always known, so can be undefined
      maxSupply

   

      mintStatus {
        # the collection endpoint will always return mintable collections
        isMintable
        # BigNumber string of amount in ETH
        price
      }
    }
  }
}
